stages:
  - test
  - deploy

variables:
  NVM_VERSION: 0.39.1
  NODE_VERSION: 10.19.0

test:
  stage: test
  image: ubuntu:20.04
  before_script:
    - apt-get update
    - apt-get upgrade -y
    - apt-get install -y tzdata
    - apt-get install -y wget
    - apt-get install -y git
    - git submodule update --init
    - wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v$NVM_VERSION/install.sh | bash
    - export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    - source ~/.bashrc
    - nvm install $NODE_VERSION
    - wget -O /tmp/chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_99.0.4844.82-1_amd64.deb
    - apt-get install -y /tmp/chrome.deb
    - cd lib/jsorolla && npm install && cd ../.. && npm install
    - npm install -g grunt-cli
    - apt-get install xvfb && Xvfb :99 & export DISPLAY=:99
  script:
    - grunt run-all-tests --env=staging
  environment:
    name: test-env
  only:
    - master
    - tags
    - test_deployment

# Not executed, parent job definition
.deploy-website:
  stage: deploy
  image: ubuntu:20.04
  environment:
    name: $ENVIRONMENT_NAME
  before_script:
    - apt-get update
    - apt-get upgrade -y
    - apt-get install -y tzdata
    - apt-get install -y wget
    - apt-get install -y git
    - apt-get install -y zip
    - apt-get install -y rsync
    - git submodule update --init
    - wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v$NVM_VERSION/install.sh | bash
    - export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    - source ~/.bashrc
    - nvm install $NODE_VERSION
    - cd lib/jsorolla && npm install && cd ../.. && npm install
    - npm install -g grunt-cli
  script:
    - grunt --env=$ENVIRONMENT_NAME
    - cd build && zip -r $ENVIRONMENT_NAME.zip .
    # Start ssh-agent and set identity then compress and copy the file to cluster and then finally to website mount point
    # See https://docs.gitlab.com/ee/ci/ssh_keys/
    - apt-get -y install openssh-client
    - eval "$(ssh-agent)"
    - echo "$EVA_ETL_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $ENVIRONMENT_NAME.zip ${CLUSTER_USER}@${CLUSTER_LOGIN_NODE}:${EVA_SOFTWARE_PATH}/eva-web/
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${CLUSTER_USER}@${CLUSTER_LOGIN_NODE} "cd ${EVA_SOFTWARE_PATH}/eva-web && rm -rf eva-$ENVIRONMENT_NAME && unzip $ENVIRONMENT_NAME.zip"
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${CLUSTER_USER}@${CLUSTER_LOGIN_NODE} "cd ${EVA_SOFTWARE_PATH}/eva-web && become -- $WEBSITE_DEPLOY_USER && rsync -av eva-$ENVIRONMENT_NAME/* /nfs/public/rw/variation/projects/eva/$WEBSITE_DEPLOY_ENVIRONMENT/www/EVA-1880"
  dependencies:
    - test

deploy-website-internal:
  extends: .deploy-website
  variables:
    ENVIRONMENT_NAME: dev
    WEBSITE_DEPLOY_ENVIRONMENT: dev
  only:
    - master

deploy-website-development:
  extends: .deploy-website
  variables:
    ENVIRONMENT_NAME: staging
    WEBSITE_DEPLOY_ENVIRONMENT: stage
  only:
    - master
    - test_deployment

deploy-website-production:
  extends: .deploy-website
  variables:
    ENVIRONMENT_NAME: prod
    WEBSITE_DEPLOY_ENVIRONMENT: prod
  only:
    - tags